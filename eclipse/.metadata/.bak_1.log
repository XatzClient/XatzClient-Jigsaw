!SESSION 2020-08-04 18:10:33.111 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=13.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file F:\Yeetbot\XatzClient\eclipse\.metadata\.bak_0.log
Created Time: 2020-08-04 18:19:14.054

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:19:14.099
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:14.099
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:14.099
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:19:14.101
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:14.101
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:19:16.126
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package me.xatzdevelopments.xatz.lbaltutils;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
   
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:19:16.129
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:16.129
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:16.129
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:19:16.130
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:16.130
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:19:19.175
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:19:19.178
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:19.178
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:19.178
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:19:19.180
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:19.180
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:19:56.753
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:19:56.756
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:56.756
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:56.756
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:19:56.758
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:19:56.758
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:06.808
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:06.811
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:06.811
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:06.811
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:06.812
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:06.812
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:16.357
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:16.361
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:16.361
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:16.361
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:16.363
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:16.364
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:18.892
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:18.894
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:18.894
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:18.894
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:18.896
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:18.896
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:27.432
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:27.434
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:27.434
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:27.435
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:27.436
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:27.436
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:29.991
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:29.994
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:29.995
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:29.996
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:30.002
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:30.002
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:33.534
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:33.537
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:33.537
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:33.537
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:33.539
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:33.539
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:39.574
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:39.577
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:39.578
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:39.578
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:39.579
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:39.579
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:43.102
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:43.104
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:43.105
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:43.105
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:43.106
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:43.106
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:20:54.309
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:20:54.314
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:54.314
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:54.314
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:20:54.316
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:20:54.317
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:21:03.846
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:21:03.849
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:21:03.849
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:21:03.849
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:21:03.851
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:21:03.851
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:24:13.108
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:24:13.113
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:13.113
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:13.113
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:24:13.116
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:13.116
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:24:15.139
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:24:15.142
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:15.142
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:15.142
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:24:15.144
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:15.144
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:24:22.176
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:24:22.178
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:22.178
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:22.178
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:24:22.288
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:24:22.288
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:25:41.900
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:25:41.903
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:25:41.903
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:25:41.903
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:25:41.904
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:25:41.904
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:26:19.486
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:26:19.488
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:19.488
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:19.488
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:26:19.490
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:19.490
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:26:22.518
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package me.xatzdevelopments.xatz.lbalts;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.xatzdevelopments.xatz.lbaltutils.*;
import net.ccbluex.liquidbounce.ui.font.Fonts;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.login.LoginUtils;
import net.ccbluex.liquidbounce.utils.login.MinecraftAccount;
import net.ccbluex.liquidbounce.utils.login.UserUtils;
import net.ccbluex.liquidbounce.utils.misc.HttpUtils;
import net.ccbluex.liquidbounce.utils.misc.MiscUtils;
import net.mcleaks.MCLeaks;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import org.lwjgl.input.Keyboard;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.List;
import java.util.*;

public class GuiAltManager extends GuiScreen {

    public static final AltService altService = new AltService();
    private static final Map<String, Boolean> GENERATORS = new HashMap<>();
    private final GuiScreen prevGui;
    public String status = "Â§7Idle...";
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    private GuiTextField searchField;

    public GuiAltManager(final GuiScreen prevGui) {
        this.prevGui = prevGui;
    }

    public static void loadGenerators() {
        try {
            // Read versions json from cloud
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get(LiquidBounce.CLIENT_CLOUD + "/generators.json"));

            // Check json is valid object
            if (jsonElement.isJsonObject()) {
                // Get json object of element
                final JsonObject jsonObject = jsonElement.getAsJsonObject();

                jsonObject.entrySet().forEach(stringJsonElementEntry -> GENERATORS.put(stringJsonElementEntry.getKey(), stringJsonElementEntry.getValue().getAsBoolean()));
            }
        } catch (final Throwable throwable) {
            // Print throwable to console
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }

    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null)
            return "";

        if (altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                altService.switchService(AltService.EnumAltService.MOJANG);
            } catch (final NoSuchFieldException | IllegalAccessException e) {
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", e);
            }
        }

        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "Â§cYour name is now Â§8" + minecraftAccount.getName() + "Â§c.";
        }

        LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            String userName = Minecraft.getMinecraft().getSession().getUsername();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "Â§cYour name is now Â§fÂ§l" + userName + "Â§c.";
        }

        if (result == LoginUtils.LoginResult.WRONG_PASSWORD)
            return "Â§cWrong password.";

        if (result == LoginUtils.LoginResult.NO_CONTACT)
            return "Â§cCannot contact authentication server.";

        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA)
            return "Â§cInvalid username or password.";

        if (result == LoginUtils.LoginResult.MIGRATED)
            return "Â§cAccount migrated.";

        return "";
    }

    public void initGui() {
        int textFieldWidth = Math.max(width / 8, 70);

        searchField = new GuiTextField(2, Fonts.font40, width - textFieldWidth - 10, 10, textFieldWidth, 20);
        searchField.setMaxStringLength(Integer.MAX_VALUE);

        altsList = new GuiList(this);
        altsList.registerScrollButtons(7, 8);

        int index = -1;

        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.getAccounts().size(); i++) {
            MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.getAccounts().get(i);

            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(mc.session.getUsername())) || minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(mc.session.getUsername()))) {
                index = i;
                break;
            }
        }

        altsList.elementClicked(index, false, 0, 0);
        altsList.scrollBy(index * altsList.slotHeight);

        int j = 22;
        this.buttonList.add(new GuiButton(1, width - 80, j + 24, 70, 20, "Add"));
        this.buttonList.add(new GuiButton(2, width - 80, j + 24 * 2, 70, 20, "Remove"));
        this.buttonList.add(new GuiButton(7, width - 80, j + 24 * 3, 70, 20, "Import"));
        this.buttonList.add(new GuiButton(12, width - 80, j + 24 * 4, 70, 20, "Export"));
        this.buttonList.add(new GuiButton(8, width - 80, j + 24 * 5, 70, 20, "Copy"));

        this.buttonList.add(new GuiButton(0, width - 80, height - 65, 70, 20, "Back"));

        this.buttonList.add(loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.buttonList.add(randomButton = new GuiButton(4, 5, j + 24 * 2, 90, 20, "Random"));
        this.buttonList.add(new GuiButton(6, 5, j + 24 * 3, 90, 20, "Direct Login"));
        this.buttonList.add(new GuiButton(88, 5, j + 24 * 4, 90, 20, "Change Name"));

        if (GENERATORS.getOrDefault("mcleaks", true))
            this.buttonList.add(new GuiButton(5, 5, j + 24 * 5 + 5, 90, 20, "MCLeaks"));
        if (GENERATORS.getOrDefault("thealtening", true))
            this.buttonList.add(new GuiButton(9, 5, j + 24 * 6 + 5, 90, 20, "TheAltening"));

        this.buttonList.add(new GuiButton(10, 5, j + 24 * 7 + 5, 90, 20, "Session Login"));
        this.buttonList.add(new GuiButton(11, 5, j + 24 * 8 + 10, 90, 20, "Cape"));

    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        drawBackground(0);

        altsList.drawScreen(mouseX, mouseY, partialTicks);

        Fonts.font40.drawCenteredString("AltManager", width / 2.0f, 6, 0xffffff);
        Fonts.font35.drawCenteredString(this.searchField.getText().isEmpty() ? (LiquidBounce.fileManager.accountsConfig.getAccounts().size() + " Alts") : this.altsList.accounts.size() + " Search Results", width / 2.0f, 18, 0xffffff);
        Fonts.font35.drawCenteredString(status, width / 2.0f, 32, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7User: Â§a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : mc.getSession().getUsername()), 6, 6, 0xffffff);
        Fonts.font35.drawStringWithShadow("Â§7Type: Â§a" + (altService.getCurrentService() == AltService.EnumAltService.THEALTENING ? "TheAltening" : MCLeaks.isAltActive() ? "MCLeaks" : UserUtils.INSTANCE.isValidTokenOffline(mc.getSession().getToken()) ? "Premium" : "Cracked"), 6, 15, 0xffffff);

        this.searchField.drawTextBox();

        if (searchField.getText().isEmpty() && !searchField.isFocused())
            drawString(Fonts.font40, "Â§7Search...", this.searchField.xPosition + 4, 17, 0xffffff);


        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (!button.enabled) return;

        switch (button.id) {
            case 0:
                mc.displayGuiScreen(prevGui);
                break;
            case 1:
                mc.displayGuiScreen(new GuiAdd(this));
                break;
            case 2:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    LiquidBounce.fileManager.accountsConfig.removeAccount(this.altsList.accounts.get(altsList.getSelectedSlot()));
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    status = "Â§aThe account has been removed.";

                    this.altsList.updateAccounts(searchField.getText());
                } else
                    status = "Â§cSelect an account.";
                break;
            case 3:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    loginButton.enabled = randomButton.enabled = false;

                    final Thread thread = new Thread(() -> {
                        final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltLogin");
                    thread.start();
                } else
                    status = "Â§cSelect an account.";
                break;
            case 4:
                if (this.altsList.accounts.size() <= 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final int randomInteger = new Random().nextInt(this.altsList.accounts.size());

                if (randomInteger < altsList.getSize())
                    altsList.selectedSlot = randomInteger;

                loginButton.enabled = randomButton.enabled = false;

                final Thread thread = new Thread(() -> {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(randomInteger);
                    status = "Â§aLogging in...";
                    status = login(minecraftAccount);

                    loginButton.enabled = randomButton.enabled = true;
                }, "AltLogin");
                thread.start();
                break;
            case 5:
                mc.displayGuiScreen(new GuiMCLeaks(this));
                break;
            case 6:
                mc.displayGuiScreen(new GuiDirectLogin(this));
                break;
            case 7:
                final File file = MiscUtils.openFileChooser();

                if (file == null)
                    return;

                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);

                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);

                    if (!LiquidBounce.fileManager.accountsConfig.accountExists(accountData[0])) {
                        if (accountData.length > 1)
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0], accountData[1]);
                        else
                            LiquidBounce.fileManager.accountsConfig.addAccount(accountData[0]);
                    }
                }

                fileReader.close();
                bufferedReader.close();

                this.altsList.updateAccounts(searchField.getText());
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                status = "Â§aThe accounts were imported successfully.";
                break;
            case 8:
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize()) {
                    final MinecraftAccount minecraftAccount = this.altsList.accounts.get(altsList.getSelectedSlot());

                    if (minecraftAccount == null)
                        break;

                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount.getName() + ":" + minecraftAccount.getPassword()), null);
                    status = "Â§aCopied account into your clipboard.";
                } else
                    status = "Â§cSelect an account.";
                break;
            case 88:
                mc.displayGuiScreen(new GuiChangeName(this));
                break;
            case 9:
                mc.displayGuiScreen(new GuiTheAltening(this));
                break;
            case 10:
                mc.displayGuiScreen(new GuiSessionLogin(this));
                break;
            case 11:
                mc.displayGuiScreen(new GuiDonatorCape(this));
                break;
            case 12:
                if (LiquidBounce.fileManager.accountsConfig.getAccounts().size() == 0) {
                    status = "Â§cThe list is empty.";
                    return;
                }

                final File selectedFile = MiscUtils.saveFileChooser();

                if (selectedFile == null || selectedFile.isDirectory())
                    return;

                try {
                    if (!selectedFile.exists())
                        selectedFile.createNewFile();

                    final FileWriter fileWriter = new FileWriter(selectedFile);

                    for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                        if (account.isCracked()) {
                            fileWriter.write(account.getName() + "\r\n");
                        } else {
                            fileWriter.write(account.getName() + ":" + account.getPassword() + "\r\n");
                        }
                    }

                    fileWriter.flush();
                    fileWriter.close();
                    JOptionPane.showMessageDialog(null, "Exported successfully!", "AltManager", JOptionPane.INFORMATION_MESSAGE);
                } catch (final Exception e) {
                    e.printStackTrace();
                    MiscUtils.showErrorPopup("Error", "Exception class: " + e.getClass().getName() + "\nMessage: " + e.getMessage());
                }
                break;
        }
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (searchField.isFocused()) {
            searchField.textboxKeyTyped(typedChar, keyCode);
            this.altsList.updateAccounts(searchField.getText());
        }

        switch (keyCode) {
            case Keyboard.KEY_ESCAPE:
                mc.displayGuiScreen(prevGui);
                return;
            case Keyboard.KEY_UP: {
                int i = altsList.getSelectedSlot() - 1;
                if (i < 0)
                    i = 0;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_DOWN: {
                int i = altsList.getSelectedSlot() + 1;
                if (i >= altsList.getSize())
                    i = altsList.getSize() - 1;
                altsList.elementClicked(i, false, 0, 0);
                break;
            }
            case Keyboard.KEY_RETURN: {
                altsList.elementClicked(altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case Keyboard.KEY_NEXT: {
                altsList.scrollBy(height - 100);
                break;
            }
            case Keyboard.KEY_PRIOR: {
                altsList.scrollBy(-height + 100);
                return;
            }
        }

        super.keyTyped(typedChar, keyCode);
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        altsList.handleMouseInput();
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        searchField.mouseClicked(mouseX, mouseY, mouseButton);

        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    public void updateScreen() {
        searchField.updateCursorCounter();
    }

    private class GuiList extends GuiSlot {
        private List<MinecraftAccount> accounts;
        private int selectedSlot;

        GuiList(GuiScreen prevGui) {
            super(GuiAltManager.this.mc, prevGui.width, prevGui.height, 40, prevGui.height - 40, 30);

            updateAccounts(null);
        }

        private void updateAccounts(String search) {
            if (search == null || search.isEmpty()) {
                this.accounts = LiquidBounce.fileManager.accountsConfig.getAccounts();
                return;
            }

            search = search.toLowerCase();

            this.accounts = new ArrayList<>();

            for (MinecraftAccount account : LiquidBounce.fileManager.accountsConfig.getAccounts()) {
                if (account.getName() != null && account.getName().toLowerCase().contains(search)
                        || account.getAccountName() != null && account.getAccountName().toLowerCase().contains(search)) {
                    this.accounts.add(account);
                }

            }
        }

        @Override
        protected boolean isSelected(int id) {
            return selectedSlot == id;
        }

        int getSelectedSlot() {
            if (selectedSlot > accounts.size())
                selectedSlot = -1;
            return selectedSlot;
        }

        public void setSelectedSlot(int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }

        @Override
        protected int getSize() {
            return accounts.size();
        }

        @Override
        protected void elementClicked(int var1, boolean doubleClick, int var3, int var4) {
            selectedSlot = var1;

            if (doubleClick) {
                if (altsList.getSelectedSlot() != -1 && altsList.getSelectedSlot() < altsList.getSize() && loginButton.enabled) {
                    loginButton.enabled = randomButton.enabled = false;

                    new Thread(() -> {
                        MinecraftAccount minecraftAccount = accounts.get(altsList.getSelectedSlot());
                        status = "Â§aLogging in...";
                        status = "Â§c" + login(minecraftAccount);

                        loginButton.enabled = randomButton.enabled = true;
                    }, "AltManagerLogin").start();
                } else
                    status = "Â§cSelect an account.";
            }
        }

        @Override
        protected void drawSlot(int id, int x, int y, int var4, int var5, int var6) {
            final MinecraftAccount minecraftAccount = accounts.get(id);
            Fonts.font40.drawCenteredString(minecraftAccount.getAccountName() == null ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (width / 2), y + 2, Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : (minecraftAccount.getAccountName() == null ? "Premium" : minecraftAccount.getName()), (width / 2), y + 15, minecraftAccount.isCracked() ? Color.GRAY.getRGB() : (minecraftAccount.getAccountName() == null ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }

        @Override
        protected void drawBackground() {
        }
    }

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:26:22.521
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:22.521
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:22.521
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:26:22.522
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:26:22.522
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:33:38.273
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:33:38.348
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:38.348
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:38.348
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:33:38.350
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:38.350
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:33:39.374
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:33:39.376
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:39.377
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:39.377
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:33:39.378
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:33:39.378
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:35:38.471
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import kotlin.*;
import com.mojang.authlib.yggdrasil.*;
import kotlin.jvm.internal.*;
import net.minecraft.util.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.event.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import kotlin.jvm.*;
import org.jetbrains.annotations.*;
import java.util.*;
import kotlin.text.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:35:38.473
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:38.473
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:38.473
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:35:38.475
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:38.475
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:35:54.017
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import kotlin.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.event.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import kotlin.jvm.*;
import org.jetbrains.annotations.*;
import java.util.*;
import kotlin.text.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:35:54.019
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:54.019
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:54.019
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:35:54.021
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:54.021
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:35:56.038
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.event.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import kotlin.jvm.*;
import org.jetbrains.annotations.*;
import java.util.*;
import kotlin.text.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:35:56.040
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:56.040
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:56.041
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:35:56.043
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:56.043
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:35:58.058
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import kotlin.jvm.*;
import org.jetbrains.annotations.*;
import java.util.*;
import kotlin.text.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:35:58.059
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:58.060
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:58.060
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:35:58.061
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:35:58.061
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:00.582
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import kotlin.text.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:00.584
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:00.584
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:00.584
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:00.586
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:00.586
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:01.602
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;

import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:01.604
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:01.604
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:01.604
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:01.606
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:01.606
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:02.620
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

@Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0004\b\u00c6\u0002\u0018\u00002\u00020\u0001:\u0001\fB\u0007\b\u0002�\u0006\u0002\u0010\u0002J\u001c\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u00062\b\u0010\u0007\u001a\u0004\u0018\u00010\u0006H\u0007J\u0012\u0010\b\u001a\u00020\t2\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0007J\u0010\u0010\n\u001a\u00020\u00042\u0006\u0010\u000b\u001a\u00020\u0006H\u0007�\u0006\r" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils;", "Lnet/ccbluex/liquidbounce/utils/MinecraftInstance;", "()V", "login", "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "username", "", "password", "loginCracked", "", "loginSessionId", "sessionId", "LoginResult", "LiquidBounce" })
public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:02.622
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:02.622
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:02.622
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:02.623
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:02.623
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:04.638
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:04.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:04.640
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:04.640
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:04.641
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:04.641
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:06.152
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:06.154
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:06.154
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:06.154
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:06.156
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:06.156
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:36:46.720
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:36:46.722
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:46.722
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:46.722
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:36:46.723
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:36:46.723
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:37:40.301
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:37:40.303
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:40.304
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:40.304
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:37:40.306
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:40.306
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:37:47.330
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    @JvmStatic
    @NotNull
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:37:47.332
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:47.332
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:47.332
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:37:47.334
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:47.334
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:37:52.848
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login(@Nullable final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:37:52.851
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:52.851
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:52.851
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:37:52.852
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:52.852
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:37:54.366
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username, @Nullable final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:37:54.368
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:54.368
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:54.368
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:37:54.369
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:192)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:54.369
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:37:56.881
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:37:56.883
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:56.883
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:56.883
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:37:56.885
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:37:56.885
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:41:37.391
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:41:37.457
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:37.457
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:37.457
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:41:37.461
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:37.462
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:41:48.208
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:41:48.229
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:48.231
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:48.232
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:41:48.240
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:48.259
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:41:50.812
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:41:50.816
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:50.817
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:50.817
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:41:50.820
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:41:50.820
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:42:07.017
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:42:07.092
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.093
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.093
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:42:07.111
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.112
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:42:07.851
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:42:07.881
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.881
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.881
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:42:07.883
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:42:07.883
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY com.genuitec.eclipse.codetogether.ui 1 0 2020-08-04 18:44:33.507
!MESSAGE Connection closed with CodeTogether backend: 

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:45:21.441
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:45:21.456
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:45:21.490
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.552
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.552
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:45:21.556
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.556
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.556
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:45:21.618
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.618
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:45:21.620
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:21.621
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:45:24.713
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:45:24.717
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:24.717
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:24.717
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:45:24.720
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:45:24.720
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:46:03.741
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:46:03.766
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:03.766
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:03.766
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:46:03.787
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:03.787
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:46:06.755
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:46:06.758
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.758
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.758
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:46:06.760
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.760
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:46:06.854
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:46:06.861
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.862
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.862
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:46:06.864
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:46:06.864
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY com.genuitec.eclipse.codetogether.ui 1 0 2020-08-04 18:47:46.521
!MESSAGE Error computing hover
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:48:23.146
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:48:23.155
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.155
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.155
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:48:23.174
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:48:23.178
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.178
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:48:23.180
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.180
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.180
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:48:23.185
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:23.185
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:48:31.220
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:48:31.223
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:31.223
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:31.223
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:48:31.226
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:48:31.226
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:49:53.842
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:49:53.844
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.844
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.844
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:49:53.846
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.846
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:49:53.850
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:49:53.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.853
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.853
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:49:53.855
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:49:53.855
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:52:04.811
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:52:04.848
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.861
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.861
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:52:04.877
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.877
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:52:04.885
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:52:04.894
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.894
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.894
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:52:04.897
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:04.897
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:52:29.311
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:52:29.314
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.314
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.314
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:52:29.318
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.318
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:52:29.320
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.ui.client.altmanager;

import com.thealtening.*;
import net.ccbluex.liquidbounce.utils.*;
import com.google.gson.*;
import net.mcleaks.*;
import net.minecraft.client.*;
import net.ccbluex.liquidbounce.*;
import net.ccbluex.liquidbounce.file.*;
import net.ccbluex.liquidbounce.ui.font.*;
import net.ccbluex.liquidbounce.utils.login.*;
import net.ccbluex.liquidbounce.utils.misc.*;
import java.awt.datatransfer.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.altgenerator.*;
import net.ccbluex.liquidbounce.ui.client.altmanager.sub.*;
import java.io.*;
import java.util.*;
import net.minecraft.client.gui.*;
import java.awt.*;

public class GuiAltManager extends GuiScreen
{
    public static final AltService altService;
    private static final Map<String, Boolean> GENERATORS;
    private final GuiScreen prevGui;
    public String status;
    private GuiButton loginButton;
    private GuiButton randomButton;
    private GuiList altsList;
    
    public GuiAltManager(final GuiScreen prevGui) {
        this.status = "�7Idle...";
        this.prevGui = prevGui;
    }
    
    public static void loadGenerators() {
        try {
            final JsonElement jsonElement = new JsonParser().parse(HttpUtils.get("https://cloud.liquidbounce.net/LiquidBounce/generators.json"));
            if (jsonElement.isJsonObject()) {
                final JsonObject jsonObject = jsonElement.getAsJsonObject();
                final Boolean b;
                jsonObject.entrySet().forEach(stringJsonElementEntry -> b = GuiAltManager.GENERATORS.put(stringJsonElementEntry.getKey(), ((JsonElement)stringJsonElementEntry.getValue()).getAsBoolean()));
            }
        }
        catch (Throwable throwable) {
            ClientUtils.getLogger().error("Failed to load enabled generators.", throwable);
        }
    }
    
    public static String login(final MinecraftAccount minecraftAccount) {
        if (minecraftAccount == null) {
            return "";
        }
        if (GuiAltManager.altService.getCurrentService() != AltService.EnumAltService.MOJANG) {
            try {
                GuiAltManager.altService.switchService(AltService.EnumAltService.MOJANG);
            }
            catch (NoSuchFieldException | IllegalAccessException ex2) {
                final ReflectiveOperationException ex;
                final ReflectiveOperationException e = ex;
                ClientUtils.getLogger().error("Something went wrong while trying to switch alt service.", (Throwable)e);
            }
        }
        if (minecraftAccount.isCracked()) {
            LoginUtils.loginCracked(minecraftAccount.getName());
            MCLeaks.remove();
            return "�cYour name is now �8" + minecraftAccount.getName() + "�c.";
        }
        final LoginUtils.LoginResult result = LoginUtils.login(minecraftAccount.getName(), minecraftAccount.getPassword());
        if (result == LoginUtils.LoginResult.LOGGED) {
            MCLeaks.remove();
            final String userName = Minecraft.func_71410_x().func_110432_I().func_111285_a();
            minecraftAccount.setAccountName(userName);
            LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
            return "�cYour name is now �f�l" + userName + "�c.";
        }
        if (result == LoginUtils.LoginResult.WRONG_PASSWORD) {
            return "�cWrong password.";
        }
        if (result == LoginUtils.LoginResult.NO_CONTACT) {
            return "�cCannot contact authentication server.";
        }
        if (result == LoginUtils.LoginResult.INVALID_ACCOUNT_DATA) {
            return "�cInvaild username or password.";
        }
        if (result == LoginUtils.LoginResult.MIGRATED) {
            return "�cAccount migrated.";
        }
        return "";
    }
    
    public void func_73866_w_() {
        (this.altsList = new GuiList(this)).func_148134_d(7, 8);
        int index = -1;
        for (int i = 0; i < LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size(); ++i) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(i);
            if (minecraftAccount != null && (((minecraftAccount.getPassword() == null || minecraftAccount.getPassword().isEmpty()) && minecraftAccount.getName() != null && minecraftAccount.getName().equals(this.field_146297_k.field_71449_j.func_111285_a())) || (minecraftAccount.getAccountName() != null && minecraftAccount.getAccountName().equals(this.field_146297_k.field_71449_j.func_111285_a())))) {
                index = i;
                break;
            }
        }
        this.altsList.func_148144_a(index, false, 0, 0);
        this.altsList.func_148145_f(index * this.altsList.field_148149_f);
        final int j = 22;
        this.field_146292_n.add(new GuiButton(1, this.field_146294_l - 80, j + 24, 70, 20, "Add"));
        this.field_146292_n.add(new GuiButton(2, this.field_146294_l - 80, j + 48, 70, 20, "Remove"));
        this.field_146292_n.add(new GuiButton(7, this.field_146294_l - 80, j + 72, 70, 20, "Import"));
        this.field_146292_n.add(new GuiButton(8, this.field_146294_l - 80, j + 96, 70, 20, "Copy"));
        this.field_146292_n.add(new GuiButton(0, this.field_146294_l - 80, this.field_146295_m - 65, 70, 20, "Back"));
        this.field_146292_n.add(this.loginButton = new GuiButton(3, 5, j + 24, 90, 20, "Login"));
        this.field_146292_n.add(this.randomButton = new GuiButton(4, 5, j + 48, 90, 20, "Random"));
        this.field_146292_n.add(new GuiButton(6, 5, j + 72, 90, 20, "Direct Login"));
        this.field_146292_n.add(new GuiButton(88, 5, j + 96, 90, 20, "Change Name"));
        if (GuiAltManager.GENERATORS.getOrDefault("mcleaks", true)) {
            this.field_146292_n.add(new GuiButton(5, 5, j + 120 + 5, 90, 20, "MCLeaks"));
        }
        if (GuiAltManager.GENERATORS.getOrDefault("thealtening", true)) {
            this.field_146292_n.add(new GuiButton(9, 5, j + 144 + 5, 90, 20, "TheAltening"));
        }
        this.field_146292_n.add(new GuiButton(10, 5, j + 168 + 5, 90, 20, "Session Login"));
        this.field_146292_n.add(new GuiButton(11, 5, j + 192 + 10, 90, 20, "Cape"));
    }
    
    public void func_73863_a(final int mouseX, final int mouseY, final float partialTicks) {
        this.func_146278_c(0);
        this.altsList.func_148128_a(mouseX, mouseY, partialTicks);
        Fonts.font40.drawCenteredString("AltManager", (float)(this.field_146294_l / 2), 6.0f, 16777215);
        Fonts.font35.drawCenteredString(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() + " Alts", (float)(this.field_146294_l / 2), 18.0f, 16777215);
        Fonts.font35.drawCenteredString(this.status, (float)(this.field_146294_l / 2), 32.0f, 16777215);
        Fonts.font35.func_175063_a("�7User: �a" + (MCLeaks.isAltActive() ? MCLeaks.getSession().getUsername() : this.field_146297_k.func_110432_I().func_111285_a()), 6.0f, 6.0f, 16777215);
        Fonts.font35.func_175063_a("�7Type: �a" + ((GuiAltManager.altService.getCurrentService() == AltService.EnumAltService.THEALTENING) ? "TheAltening" : (MCLeaks.isAltActive() ? "MCLeaks" : (UserUtils.INSTANCE.isValidTokenOffline(this.field_146297_k.func_110432_I().func_148254_d()) ? "Premium" : "Cracked"))), 6.0f, 15.0f, 16777215);
        super.func_73863_a(mouseX, mouseY, partialTicks);
    }
    
    protected void func_146284_a(final GuiButton button) throws IOException {
        if (!button.field_146124_l) {
            return;
        }
        switch (button.field_146127_k) {
            case 0: {
                this.field_146297_k.func_147108_a(this.prevGui);
                break;
            }
            case 1: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiAdd(this));
                break;
            }
            case 2: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.remove(this.altsList.getSelectedSlot());
                    LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                    this.status = "�aThe account has been removed.";
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 3: {
                if (this.altsList.getSelectedSlot() != -1 && this.altsList.getSelectedSlot() < this.altsList.func_148127_b()) {
                    final GuiButton loginButton = this.loginButton;
                    final GuiButton randomButton = this.randomButton;
                    final boolean b = false;
                    randomButton.field_146124_l = b;
                    loginButton.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final GuiButton loginButton2;
                    final GuiButton randomButton2;
                    final boolean b2;
                    final Thread thread = new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                        this.status = "�aLogging in...";
                        this.status = login(minecraftAccount);
                        loginButton2 = this.loginButton;
                        randomButton2 = this.randomButton;
                        randomButton2.field_146124_l = b2;
                        loginButton2.field_146124_l = b2;
                        return;
                    }, "AltLogin");
                    thread.start();
                    break;
                }
                this.status = "�cSelect an account.";
                break;
            }
            case 4: {
                if (LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size() <= 0) {
                    this.status = "�cThe list is empty.";
                    return;
                }
                final int randomInteger = new Random().nextInt(LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size());
                if (randomInteger < this.altsList.func_148127_b()) {
                    this.altsList.selectedSlot = randomInteger;
                }
                final GuiButton loginButton3 = this.loginButton;
                final GuiButton randomButton3 = this.randomButton;
                final boolean b3 = false;
                randomButton3.field_146124_l = b3;
                loginButton3.field_146124_l = b3;
                final MinecraftAccount minecraftAccount2;
                final GuiButton loginButton4;
                final GuiButton randomButton4;
                final boolean b4;
                final Thread thread2 = new Thread(() -> {
                    minecraftAccount2 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(randomInteger);
                    this.status = "�aLogging in...";
                    this.status = login(minecraftAccount2);
                    loginButton4 = this.loginButton;
                    randomButton4 = this.randomButton;
                    randomButton4.field_146124_l = b4;
                    loginButton4.field_146124_l = b4;
                    return;
                }, "AltLogin");
                thread2.start();
                break;
            }
            case 5: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiMCLeaks(this));
                break;
            }
            case 6: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDirectLogin(this));
                break;
            }
            case 7: {
                final File file = MiscUtils.openFileChooser();
                if (file == null) {
                    return;
                }
                final FileReader fileReader = new FileReader(file);
                final BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    final String[] accountData = line.split(":", 2);
                    boolean alreadyAdded = false;
                    for (final MinecraftAccount registeredMinecraftAccount : LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts) {
                        if (registeredMinecraftAccount.getName().equalsIgnoreCase(accountData[0])) {
                            alreadyAdded = true;
                            break;
                        }
                    }
                    if (!alreadyAdded) {
                        if (accountData.length > 1) {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0], accountData[1]));
                        }
                        else {
                            LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.add(new MinecraftAccount(accountData[0]));
                        }
                    }
                }
                fileReader.close();
                bufferedReader.close();
                LiquidBounce.fileManager.saveConfig(LiquidBounce.fileManager.accountsConfig);
                this.status = "�aThe accounts were imported successfully.";
                break;
            }
            case 8: {
                if (this.altsList.getSelectedSlot() == -1 || this.altsList.getSelectedSlot() >= this.altsList.func_148127_b()) {
                    this.status = "�cSelect an account.";
                    break;
                }
                final MinecraftAccount minecraftAccount3 = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(this.altsList.getSelectedSlot());
                if (minecraftAccount3 == null) {
                    break;
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(minecraftAccount3.getName() + ":" + minecraftAccount3.getPassword()), null);
                this.status = "�aCopied account into your clipboard.";
                break;
            }
            case 88: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiChangeName(this));
                break;
            }
            case 9: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiTheAltening(this));
                break;
            }
            case 10: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiSessionLogin(this));
                break;
            }
            case 11: {
                this.field_146297_k.func_147108_a((GuiScreen)new GuiDonatorCape(this));
                break;
            }
        }
    }
    
    protected void func_73869_a(final char typedChar, final int keyCode) throws IOException {
        switch (keyCode) {
            case 1: {
                this.field_146297_k.func_147108_a(this.prevGui);
                return;
            }
            case 200: {
                int i = this.altsList.getSelectedSlot() - 1;
                if (i < 0) {
                    i = 0;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 208: {
                int i = this.altsList.getSelectedSlot() + 1;
                if (i >= this.altsList.func_148127_b()) {
                    i = this.altsList.func_148127_b() - 1;
                }
                this.altsList.func_148144_a(i, false, 0, 0);
                break;
            }
            case 28: {
                this.altsList.func_148144_a(this.altsList.getSelectedSlot(), true, 0, 0);
                break;
            }
            case 209: {
                this.altsList.func_148145_f(this.field_146295_m - 100);
                break;
            }
            case 201: {
                this.altsList.func_148145_f(-this.field_146295_m + 100);
                return;
            }
        }
        super.func_73869_a(typedChar, keyCode);
    }
    
    public void func_146274_d() throws IOException {
        super.func_146274_d();
        this.altsList.func_178039_p();
    }
    
    static {
        altService = new AltService();
        GENERATORS = new HashMap<String, Boolean>();
    }
    
    private class GuiList extends GuiSlot
    {
        private int selectedSlot;
        
        GuiList(final GuiScreen prevGui) {
            super(GuiAltManager.this.field_146297_k, prevGui.field_146294_l, prevGui.field_146295_m, 40, prevGui.field_146295_m - 40, 30);
        }
        
        protected boolean func_148131_a(final int id) {
            return this.selectedSlot == id;
        }
        
        int getSelectedSlot() {
            if (this.selectedSlot > LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size()) {
                this.selectedSlot = -1;
            }
            return this.selectedSlot;
        }
        
        public void setSelectedSlot(final int selectedSlot) {
            this.selectedSlot = selectedSlot;
        }
        
        protected int func_148127_b() {
            return LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.size();
        }
        
        protected void func_148144_a(final int var1, final boolean doubleClick, final int var3, final int var4) {
            this.selectedSlot = var1;
            if (doubleClick) {
                if (GuiAltManager.this.altsList.getSelectedSlot() != -1 && GuiAltManager.this.altsList.getSelectedSlot() < GuiAltManager.this.altsList.func_148127_b() && GuiAltManager.this.loginButton.field_146124_l) {
                    final GuiButton access$200 = GuiAltManager.this.loginButton;
                    final GuiButton access$201 = GuiAltManager.this.randomButton;
                    final boolean b = false;
                    access$201.field_146124_l = b;
                    access$200.field_146124_l = b;
                    final MinecraftAccount minecraftAccount;
                    final Object o;
                    final boolean b2;
                    final GuiButton guiButton;
                    new Thread(() -> {
                        minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(GuiAltManager.this.altsList.getSelectedSlot());
                        GuiAltManager.this.status = "�aLogging in...";
                        GuiAltManager.this.status = "�c" + GuiAltManager.login(minecraftAccount);
                        GuiAltManager.this.loginButton;
                        GuiAltManager.this.randomButton;
                        ((GuiButton)o).field_146124_l = b2;
                        guiButton.field_146124_l = b2;
                    }, "AltManagerLogin").start();
                }
                else {
                    GuiAltManager.this.status = "�cSelect an account.";
                }
            }
        }
        
        protected void func_180791_a(final int id, final int x, final int y, final int var4, final int var5, final int var6) {
            final MinecraftAccount minecraftAccount = LiquidBounce.fileManager.accountsConfig.altManagerMinecraftAccounts.get(id);
            Fonts.font40.drawCenteredString((minecraftAccount.getAccountName() == null) ? minecraftAccount.getName() : minecraftAccount.getAccountName(), (float)(this.field_148155_a / 2), (float)(y + 2), Color.WHITE.getRGB(), true);
            Fonts.font40.drawCenteredString(minecraftAccount.isCracked() ? "Cracked" : ((minecraftAccount.getAccountName() == null) ? "Premium" : minecraftAccount.getName()), (float)(this.field_148155_a / 2), (float)(y + 15), minecraftAccount.isCracked() ? Color.GRAY.getRGB() : ((minecraftAccount.getAccountName() == null) ? Color.GREEN.getRGB() : Color.LIGHT_GRAY.getRGB()), true);
        }
        
        protected void func_148123_a() {
        }
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2020-08-04 18:52:29.323
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.324
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.324
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2020-08-04 18:52:29.326
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:324)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:346)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:193)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1274)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:138)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2020-08-04 18:52:29.326
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2020-08-04 18:54:39.229
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package net.ccbluex.liquidbounce.utils.login;

import net.ccbluex.liquidbounce.utils.*;
import java.net.*;
import com.mojang.authlib.yggdrasil.*;
import net.minecraft.util.*;
import com.mojang.authlib.exceptions.*;
import net.minecraft.client.*;
import com.mojang.authlib.*;
import java.util.*;
import com.google.gson.*;

public final class LoginUtils extends MinecraftInstance
{
    public static final LoginUtils INSTANCE;
    
    
    public static final LoginResult login( final String username,  final String password) {
        final UserAuthentication userAuthentication2 = new YggdrasilAuthenticationService(Proxy.NO_PROXY, "").createUserAuthentication(Agent.MINECRAFT);
        if (userAuthentication2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication");
        }
        final YggdrasilUserAuthentication userAuthentication = (YggdrasilUserAuthentication)userAuthentication2;
        userAuthentication.setUsername(username);
        userAuthentication.setPassword(password);
        LoginResult loginResult;
        try {
            userAuthentication.logIn();
            final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
            final GameProfile selectedProfile = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile, "userAuthentication.selectedProfile");
            final String name = selectedProfile.getName();
            final GameProfile selectedProfile2 = userAuthentication.getSelectedProfile();
            Intrinsics.checkExpressionValueIsNotNull(selectedProfile2, "userAuthentication.selectedProfile");
            access$getMc$p$s1046033730.field_71449_j = new Session(name, selectedProfile2.getId().toString(), userAuthentication.getAuthenticatedToken(), "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            loginResult = LoginResult.LOGGED;
        }
        catch (AuthenticationUnavailableException exception2) {
            loginResult = LoginResult.NO_CONTACT;
        }
        catch (AuthenticationException exception) {
            final String message2 = exception.getMessage();
            if (message2 == null) {
                Intrinsics.throwNpe();
            }
            final String message = message2;
            loginResult = (StringsKt__StringsKt.contains(message, "invalid username or password.", true) ? LoginResult.INVALID_ACCOUNT_DATA : (StringsKt__StringsKt.contains(message, "account migrated", true) ? LoginResult.MIGRATED : LoginResult.NO_CONTACT));
        }
        catch (NullPointerException exception3) {
            loginResult = LoginResult.WRONG_PASSWORD;
        }
        return loginResult;
    }
    
    @JvmStatic
    public static final void loginCracked(@Nullable final String username) {
        final Minecraft access$getMc$p$s1046033730 = access$getMc$p$s1046033730();
        final UserUtils instance = UserUtils.INSTANCE;
        if (username == null) {
            Intrinsics.throwNpe();
        }
        access$getMc$p$s1046033730.field_71449_j = new Session(username, instance.getUUID(username), "-", "legacy");
        LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
    }
    
    @JvmStatic
    @NotNull
    public static final LoginResult loginSessionId(@NotNull final String sessionId) {
        Intrinsics.checkParameterIsNotNull(sessionId, "sessionId");
        String s;
        try {
            final byte[] decode = Base64.getDecoder().decode(StringsKt__StringsKt.split$default(sessionId, new String[] { "." }, false, 0, 6, null).get(1));
            Intrinsics.checkExpressionValueIsNotNull(decode, "Base64.getDecoder().deco\u2026(sessionId.split(\".\")[1])");
            s = new String(decode, Charsets.UTF_8);
        }
        catch (Exception e) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final String decodedSessionData = s;
        JsonObject asJsonObject;
        try {
            final JsonElement parse = new JsonParser().parse(decodedSessionData);
            Intrinsics.checkExpressionValueIsNotNull(parse, "JsonParser().parse(decodedSessionData)");
            asJsonObject = parse.getAsJsonObject();
        }
        catch (Exception e2) {
            return LoginResult.FAILED_PARSE_TOKEN;
        }
        final JsonObject sessionObject = asJsonObject;
        final JsonElement value = sessionObject.get("spr");
        Intrinsics.checkExpressionValueIsNotNull(value, "sessionObject.get(\"spr\")");
        final String uuid = value.getAsString();
        final JsonElement value2 = sessionObject.get("yggt");
        Intrinsics.checkExpressionValueIsNotNull(value2, "sessionObject.get(\"yggt\")");
        final String accessToken = value2.getAsString();
        final UserUtils instance = UserUtils.INSTANCE;
        final String s2 = accessToken;
        Intrinsics.checkExpressionValueIsNotNull(s2, "accessToken");
        if (!instance.isValidToken(s2)) {
            return LoginResult.INVALID_ACCOUNT_DATA;
        }
        final UserUtils instance2 = UserUtils.INSTANCE;
        final String s3 = uuid;
        Intrinsics.checkExpressionValueIsNotNull(s3, "uuid");
        final String username2 = instance2.getUsername(s3);
        if (username2 != null) {
            final String username = username2;
            access$getMc$p$s1046033730().field_71449_j = new Session(username, uuid, accessToken, "mojang");
            LiquidBounce.INSTANCE.getEventManager().callEvent(new SessionEvent());
            return LoginResult.LOGGED;
        }
        return LoginResult.INVALID_ACCOUNT_DATA;
    }
    
    private LoginUtils() {
    }
    
    static {
        INSTANCE = new LoginUtils();
    }
    
    public static final /* synthetic */ Minecraft access$getMc$p$s1046033730() {
        return MinecraftInstance.mc;
    }
    
    @Metadata(mv = { 1, 1, 16 }, bv = { 1, 0, 3 }, k = 1, d1 = { "\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0002\b\b\b\u0086\u0001\u0018\u00002\b\u0012\u0004\u0012\u00020\u00000\u0001B\u0007\b\u0002�\u0006\u0002\u0010\u0002j\u0002\b\u0003j\u0002\b\u0004j\u0002\b\u0005j\u0002\b\u0006j\u0002\b\u0007j\u0002\b\b�\u0006\t" }, d2 = { "Lnet/ccbluex/liquidbounce/utils/login/LoginUtils$LoginResult;", "", "(Ljava/lang/String;I)V", "WRONG_PASSWORD", "NO_CONTACT", "INVALID_ACCOUNT_DATA", "MIGRATED", "LOGGED", "FAILED_PARSE_TOKEN", "LiquidBounce" })
    public enum LoginResult
    {
        WRONG_PASSWORD, 
        NO_CONTACT, 
        INVALID_ACCOUNT_DATA, 
        MIGRATED, 
        LOGGED, 
        FAILED_PARSE_TOKEN;
    }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
